{
	"info": {
		"_postman_id": "69be5dc9-a33b-485f-a8d8-78d9a886d2e4",
		"name": "Blacklist",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31153890"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"tokenUsers\", pm.variables.replaceIn(JSON.parse(responseBody).token));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"{{emailQacoders}}\",\r\n  \"password\": \"{{passwordQacoders}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userId\", JSON.parse(responseBody).user._id);\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"url\")}/user/${pm.environment.get(\"userId\")}`,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        \"Authorization\": `${pm.environment.get(\"tokenUsers\")}`\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    try {\r",
									"        pm.expect(response.json()).exist;\r",
									"        testResult = true;\r",
									"    } catch(error) {\r",
									"        testResult = false;\r",
									"        pm.test(\"Create user\", function () {\r",
									"            pm.expect(true).to.eql(testResult);\r",
									"        });\r",
									"    }\r",
									"    if (testResult !== false) {\r",
									"        pm.test(\"User created and saved in the database.\", function () {\r",
									"            pm.expect(pm.environment.get(\"userId\")).to.eql(response.json()._id);\r",
									"        });\r",
									"        pm.test(\"Status fullName is true\", function () {\r",
									"            pm.expect(pm.environment.get(\"fullName\")).to.eql(response.json().fullName);\r",
									"        });\r",
									"        pm.test(\"Status email is true\", function () {\r",
									"            pm.expect(pm.environment.get(\"mailUser\")).to.eql(response.json().mail);\r",
									"        });\r",
									"        pm.test(\"Status cpf is true\", function () {\r",
									"            pm.expect(pm.environment.get(\"CPF\")).to.eql(response.json().cpf);\r",
									"        });\r",
									"        pm.test(\"Status code is 201\", function () {\r",
									"            pm.response.to.have.status(201);\r",
									"        });\r",
									"\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"function firstname() {\r",
									"    const names = ['Alice', 'Miguel', 'Sophia', 'Arthur', 'Helena', 'Bernardo', 'Valentina', 'Heitor', 'Laura', 'Davi', 'Isabella', 'Lorenzo', 'Manuela', 'Theo', 'Luiza', 'Pedro', 'Giovanna', 'Gabriel', 'Julia'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Rodrigues', 'Almeida', 'Lima', 'Ferreira', 'Pereira', 'Carvalho', 'Goncalves', 'Ribeiro', 'Costa', 'Araujo', 'Martins', 'Fernandes'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullName\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")  + pm.variables.replaceIn('{{$guid}}') + '@qacoders.com.br')\r",
									"\r",
									" \r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUser\", generatePassword());\r",
									"\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"CPF\", randomCpf());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"password\": \"{{passUser}}\",\r\n  \"confirmPassword\": \"{{passUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"password\": \"{{passUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User By ID - sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://black-list.qacoders.dev.br/api/user/67a24d69b94dd4b9b99e4043",
							"protocol": "https",
							"host": [
								"black-list",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user",
								"67a24d69b94dd4b9b99e4043"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar usuários - sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://black-list.qacoders.dev.br/api/user",
							"protocol": "https",
							"host": [
								"black-list",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar usuários - Erro Interno",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Erro Interno do Servidor\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cast to ObjectId failed for value\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://black-list.qacoders.dev.br/api/user/012",
							"protocol": "https",
							"host": [
								"black-list",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user",
								"012"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar usuários - não encontrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://black-list.qacoders.dev.br/api",
							"protocol": "https",
							"host": [
								"black-list",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar usuários - Acesso negado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Check msg: Acesso negado.\", function () {\r",
									"    pm.expect(pm.globals.get(\"MsgTokenReturn\")).to.eql(JSON.parse(responseBody).errors[0]);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://black-list.qacoders.dev.br/api/user",
							"protocol": "https",
							"host": [
								"black-list",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Contagem de usuário- sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://black-list.qacoders.dev.br/api/user/count",
							"protocol": "https",
							"host": [
								"black-list",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Contagem de usuário-Acesso negado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check msg: Acesso negado.\", function () {\r",
									"    pm.expect(pm.globals.get(\"MsgTokenReturn\")).to.eql(JSON.parse(responseBody).errors[0]);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://black-list.qacoders.dev.br/api/user/count",
							"protocol": "https",
							"host": [
								"black-list",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Contagem de usuário-Não encontrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404); \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://black-list.qacoders.dev.br/api/",
							"protocol": "https",
							"host": [
								"black-list",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Contagem de usuário- erro interno",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Erro Interno do Servidor\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cast to ObjectId failed for value\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://black-list.qacoders.dev.br/api/user/coun",
							"protocol": "https",
							"host": [
								"black-list",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user",
								"coun"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User By ID erro interno",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Erro Interno do Servidor\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cast to ObjectId failed for value\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://black-list.qacoders.dev.br/api/user/0123",
							"protocol": "https",
							"host": [
								"black-list",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user",
								"0123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User By ID Acesso negado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check msg: Acesso negado.\", function () {\r",
									"    pm.expect(pm.globals.get(\"MsgTokenReturn\")).to.eql(JSON.parse(responseBody).errors[0]);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://black-list.qacoders.dev.br/api/user/0123",
							"protocol": "https",
							"host": [
								"black-list",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user",
								"0123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search User By ID não encontrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404); \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://black-list.qacoders.dev.br/api/",
							"protocol": "https",
							"host": [
								"black-list",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Company",
			"item": [
				{
					"name": "New company",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"CompanyuserId\", JSON.parse(responseBody).newCompany._id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Check if response contains 'foi cadastrada com sucesso.'\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.msg).to.include(\"foi cadastrada com sucesso.\");\r",
									"\r",
									"    pm.globals.set(\"MsgEmpresaCriada\", response.msg);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Santos\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": 1234567890,\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar endereço",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if address update message is correct\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"  \r",
									"    pm.expect(response.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
									"\r",
									"   \r",
									"    pm.globals.set(\"MsgEnderecoAtualizado\", response.msg);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"Rua das Florestas\",\r\n      \"street\": \"Centro\",\r\n      \"number\": 5545656561,\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bairro - Campo em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'bairro' é obrigatório..\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'bairro' é obrigatório.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bairro - 51 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"const response = pm.response.json();\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"pm.test(\"O campo 'bairro' deve possuir no máximo 50 caracteres.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'bairro' deve possuir no máximo 50 caracteres.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"Residencial Jardim das Palmeiras Extensivo do Norte\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cidade - campo em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'cidade' é obrigatório.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'cidade' é obrigatório.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"Residencial J\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Estado - Campo em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'estado' é obrigatório.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'estado' é obrigatório.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"\",\r\n      \"district\": \"Residencial J\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Estado - somente números",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'estado' só pode conter letras maiúsculas\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'estado' só pode conter letras maiúsculas\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Paes landim\",\r\n      \"state\": \"51\",\r\n      \"district\": \"Residencial J\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Estado - campo com 03 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'estado' deve possuir 2 caracteres.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'estado' deve possuir 2 caracteres.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Brasília \",\r\n      \"state\": \"NYC\",\r\n      \"district\": \"Residencial J\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "País - Campo em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo País é obrigatório.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo País é obrigatório.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Brasília \",\r\n      \"state\": \"DF\",\r\n      \"district\": \"Residencial J\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "País - somente números",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'País' só pode conter apenas letras.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'País' só pode conter apenas letras.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Brasília \",\r\n      \"state\": \"DF\",\r\n      \"district\": \"Residencial J\",\r\n      \"street\": \"Centro\",\r\n      \"number\": 1234567891,\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"12365478\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "País - 51 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"pm.test(\"O campo País permite até 50 caracteres.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo País permite até 50 caracteres.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Brasília \",\r\n      \"state\": \"DF\",\r\n      \"district\": \"Residencial J\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Santa Bárbara do Monte Verde dos Campos Extensivos do norte\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cep - campo em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'CEP' é obrigatório.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'CEP' é obrigatório.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"\",\r\n      \"city\": \"Brasília \",\r\n      \"state\": \"DF\",\r\n      \"district\": \"Residencial J\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cep - somente letras",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'CEP' só pode conter números\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'CEP' só pode conter números\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"Distrito\",\r\n      \"city\": \"Brasília \",\r\n      \"state\": \"DF\",\r\n      \"district\": \"Residencial J\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cep - sem mascara",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'número' só pode conter apenas números.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'número' só pode conter apenas números.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Brasília \",\r\n      \"state\": \"DF\",\r\n      \"district\": \"Residencial J\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cidade - 51 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'cidade' deve possuir no máximo 50 caracteres.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'cidade' deve possuir no máximo 50 caracteres.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Santa Bárbara do Monte Verde dos Campos Extensivos do norte\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"Residencial J\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cidade - somente números",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									" \r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"987456321\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"Residencial J\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bairro - somente números",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'número' só pode conter apenas números.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'número' só pode conter apenas números.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"123456789\",\r\n      \"street\": \"centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar endereço - 51 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"pm.test(\"O campo 'bairro' deve possuir no máximo 50 caracteres.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'bairro' deve possuir no máximo 50 caracteres.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"Residencial Jardim das Palmeiras Extensivo do Norte\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar endereço - somente números",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'número' só pode conter apenas números.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'número' só pode conter apenas números.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"1234567894521564\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"554\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar endereço - campo em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Endereço obrigatório\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'CEP' é obrigatório.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n     \r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Número - número em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'número' é obrigatório.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'número' é obrigatório.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"Rua das Florestas\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Número - campo com 11 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'número' deve possuir no máximo 10 caracteres.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'número' deve possuir no máximo 10 caracteres.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"Rua das Florestas\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"12345678911\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Número - Campo número  com letras",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"if (response.error && Array.isArray(response.error)) {\r",
									"    pm.globals.set(\"ListaDeErros\", JSON.stringify(response.error));\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"O campo 'número' só pode conter apenas números.\", function () {\r",
									"    pm.expect(response.error).to.include(\"O campo 'número' só pode conter apenas números.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"14777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"Rua das Florestas\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"Postman\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/{{CompanyuserId}}",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"{{CompanyuserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar endereço - erro servidor 500",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Erro Interno do Servidor\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cast to ObjectId failed for value\");\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"5523154689\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/12345",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"12345"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar endereço - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"55\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/67b49829b94dd4b9b9a28084",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"67b49829b94dd4b9b9a28084"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar endereço - Acesso negado 403",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check msg: Acesso negado.\", function () {\r",
									"    pm.expect(pm.globals.get(\"MsgTokenReturn\")).to.eql(JSON.parse(responseBody).errors[0]);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"55\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/67b49829b94dd4b9b9a28084",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"67b49829b94dd4b9b9a28084"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar endereço - Acesso negado 403",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstnameCompany() {\r",
									"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
									"\r",
									"function lastnameCompany() {\r",
									"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
									"\r",
									"pm.environment.set(\"nomedaempresa\", \r",
									"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
									"\r",
									"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passUsercompany\", generatePassword());\r",
									"\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
									"    const cnpjBase = n + '0001';\r",
									"\r",
									"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
									"\r",
									"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
									"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
									"\r",
									"    return cnpjBase + digito1 + digito2;\r",
									"}\r",
									"\r",
									"let novoCNPJ = gerarCNPJ();\r",
									"pm.environment.set(\"cnpj\", novoCNPJ);\r",
									"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check msg: Acesso negado.\", function () {\r",
									"    pm.expect(pm.globals.get(\"MsgTokenReturn\")).to.eql(JSON.parse(responseBody).errors[0]);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{mailUsercompany}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"Paes Landim\",\r\n      \"state\": \"PI\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Centro\",\r\n      \"number\": \"55\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/company/address/67b49829b94dd4b9b9a28084",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"company",
								"address",
								"67b49829b94dd4b9b9a28084"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Board",
			"item": [
				{
					"name": "Diretoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if address update message is correct\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"  \r",
									"    pm.expect(response.msg).to.eql(\"Cadastro realizado com sucesso!\");\r",
									"\r",
									"   \r",
									"    pm.globals.set(\"DiretoriaSucesso\", response.msg);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function boardName() {\r",
									"    let boardName = [\"Financeiro\", \"Recursos Humanos\", \"Finanças\", \"Marketing\", \"Tecnologia\", \"Vendas\", \"Produção\", \"Jurídico\", \"Logística\", \"Pesquisa\", \"Desenvolvimento\", \"Compras\", \"Cultura\", \"Atendimento\", \"Auditoria\", \"Projetos\", \"Suprimentos\", \"Almoxarifado\", \"Sustentabilidade\"];\r",
									"    let randomItem = boardName[Math.floor(Math.random() * boardName.length)];\r",
									"    return randomItem;\r",
									"}\r",
									" \r",
									"// Gera um GUID e remove hifens e números\r",
									"function cleanGuid() {\r",
									"    return pm.variables.replaceIn('{{$guid}}')\r",
									"        .replace(/-/g, '')       // Remove hifens\r",
									"        .replace(/[0-9]/g, '');  // Remove números\r",
									"}\r",
									" \r",
									"const name = boardName();\r",
									"const guid = cleanGuid().substring(0, 8); // Pega apenas os primeiros 8 caracteres\r",
									" \r",
									"pm.environment.set(\"BoardName\", name);\r",
									"pm.environment.set(\"BoardNameComplete\", name  + guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"boardName\": \"{{BoardNameComplete}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/board",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"board"
							]
						}
					},
					"response": []
				},
				{
					"name": "Diretoria listagem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function boardName() {\r",
									"    let boardName = [\"Financeiro\", \"Recursos Humanos\", \"Finanças\", \"Marketing\", \"Tecnologia\", \"Vendas\", \"Produção\", \"Jurídico\", \"Logística\", \"Pesquisa\", \"Desenvolvimento\", \"Compras\", \"Cultura\", \"Atendimento\", \"Auditoria\", \"Projetos\", \"Suprimentos\", \"Almoxarifado\", \"Sustentabilidade\"];\r",
									"    let randomItem = boardName[Math.floor(Math.random() * boardName.length)];\r",
									"    return randomItem;\r",
									"}\r",
									" \r",
									"// Gera um GUID e remove hifens e números\r",
									"function cleanGuid() {\r",
									"    return pm.variables.replaceIn('{{$guid}}')\r",
									"        .replace(/-/g, '')       // Remove hifens\r",
									"        .replace(/[0-9]/g, '');  // Remove números\r",
									"}\r",
									" \r",
									"const name = boardName();\r",
									"const guid = cleanGuid().substring(0, 8); // Pega apenas os primeiros 8 caracteres\r",
									" \r",
									"pm.environment.set(\"BoardName\", name);\r",
									"pm.environment.set(\"BoardNameComplete\", name  + guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"boardName\": \"{{BoardNameComplete}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/board",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"board"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Costcenter",
			"item": [
				{
					"name": "Centro de custo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if address update message is correct\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"  \r",
									"    pm.expect(response.msg).to.eql(\"Cadastro realizado com sucesso.\");\r",
									"\r",
									"   \r",
									"    pm.globals.set(\"MsgEnderecoAtualizado\", response.msg);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function centroCustoname() {\r",
									"    let centroCustoname = [\"Financeiro\", \"Recursos Humanos\", \"Finanças\", \"Marketing\", \"Tecnologia\", \"Vendas\", \"Produção\", \"Jurídico\", \"Logística\", \"Pesquisa\", \"Desenvolvimento\", \"Compras\", \"Cultura\", \"Atendimento\", \"Auditoria\", \"Projetos\", \"Suprimentos\", \"Almoxarifado\", \"Sustentabilidade\"];\r",
									"    let randomItem = centroCustoname[Math.floor(Math.random() * centroCustoname.length)];\r",
									"    return randomItem;\r",
									"}\r",
									" \r",
									"// Gera um GUID e remove hifens e números\r",
									"function cleanGuid() {\r",
									"    return pm.variables.replaceIn('{{$guid}}')\r",
									"        .replace(/-/g, '')       // Remove hifens\r",
									"        .replace(/[0-9]/g, '');  // Remove números\r",
									"}\r",
									" \r",
									"const name = centroCustoname();\r",
									"const guid = cleanGuid().substring(0, 8); // Pega apenas os primeiros 8 caracteres\r",
									" \r",
									"pm.environment.set(\"CentroCustoname\", name);\r",
									"pm.environment.set(\"CentroCustonameComplate\", name  + guid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"costCenterName\": \"{{CentroCustonameComplate}}\",\r\n  \"boardId\": \"{{DiretoriaId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/costCenter",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"costCenter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar centro de custo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/costCenter",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"costCenter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar centro de custo - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/costCenter/67b37ba5b94dd4b9b9a1ca72",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"costCenter",
								"67b37ba5b94dd4b9b9a1ca72"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar centro de custo - erro interno 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Erro Interno do Servidor\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cast to ObjectId failed for value\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/costCenter/0123",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"costCenter",
								"0123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar centro de custo - Acesso Negado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check msg: Acesso negado.\", function () {\r",
									"    pm.expect(pm.globals.get(\"MsgTokenReturn\")).to.eql(JSON.parse(responseBody).errors[0]);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basicUrl}}/costCenter",
							"host": [
								"{{basicUrl}}"
							],
							"path": [
								"costCenter"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}